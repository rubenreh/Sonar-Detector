import processing.serial.*; // Import library for serial communication
import java.awt.event.KeyEvent; // Import library for reading data from the serial port
import java.io.IOException;

// Create a Serial object to handle serial communication
Serial myPort; 

// Define variables to store sensor data
String angle = "";
String distance = "";
String data = "";
String noObject;
float pixsDistance;
int iAngle, iDistance;
int index1 = 0;
int index2 = 0;
PFont orcFont;

void setup() {
  size(1200, 700); // Set the window size (adjust to your screen resolution)
  smooth(); // Enable anti-aliasing for shapes

  // Initialize serial communication on COM7 port at 9600 baud rate
  myPort = new Serial(this, "COM7", 9600);
  myPort.bufferUntil('.'); // Read data until '.' character is encountered
}

void draw() {
  fill(98, 245, 31); // Set fill color to green
  
  // Simulate motion blur and slow fade of the moving line
  noStroke(); 
  fill(0, 4); 
  rect(0, 0, width, height - height * 0.065); 

  fill(98, 245, 31); // Set fill color to green again

  // Call functions to draw the radar, line, object, and text
  drawRadar(); 
  drawLine();
  drawObject();
  drawText();
}

void serialEvent(Serial myPort) { // Handle serial data event
  // Read data from the serial port up to the '.' character
  data = myPort.readStringUntil('.');
  data = data.substring(0, data.length() - 1);

  // Find the index of the ',' character
  index1 = data.indexOf(",");
  
  // Extract angle and distance from the received data
  angle = data.substring(0, index1);
  distance = data.substring(index1 + 1, data.length());

  // Convert the String variables to integers
  iAngle = int(angle);
  iDistance = int(distance);
}

void drawRadar() {
  pushMatrix(); // Save the current transformation matrix
  translate(width / 2, height - height * 0.074); // Move the origin to the specified location
  noFill(); // Disable filling
  strokeWeight(2); // Set stroke weight
  stroke(98, 245, 31); // Set stroke color to green

  // Draw arc lines to represent the radar
  arc(0, 0, (width - width * 0.0625), (width - width * 0.0625), PI, TWO_PI);
  arc(0, 0, (width - width * 0.27), (width - width * 0.27), PI, TWO_PI);
  arc(0, 0, (width - width * 0.479), (width - width * 0.479), PI, TWO_PI);
  arc(0, 0, (width - width * 0.687), (width - width * 0.687), PI, TWO_PI);

  // Draw angle lines
  line(-width / 2, 0, width / 2, 0);
  line(0, 0, (-width / 2) * cos(radians(30)), (-width / 2) * sin(radians(30)));
  line(0, 0, (-width / 2) * cos(radians(60)), (-width / 2) * sin(radians(60)));
  line(0, 0, (-width / 2) * cos(radians(90)), (-width / 2) * sin(radians(90)));
  line(0, 0, (-width / 2) * cos(radians(120)), (-width / 2) * sin(radians(120)));
  line(0, 0, (-width / 2) * cos(radians(150)), (-width / 2) * sin(radians(150)));

  popMatrix(); // Restore the previous transformation matrix
}

void drawObject() {
  pushMatrix(); // Save the current transformation matrix
  translate(width / 2, height - height * 0.074); // Move the origin to the specified location
  strokeWeight(9); // Set stroke weight
  stroke(255, 10, 10); // Set stroke color to red

  // Convert the distance from cm to pixels
  pixsDistance = iDistance * ((height - height * 0.1666) * 0.025);

  // Limit the range to 40 cm
  if (iDistance < 40) {
    // Draw the object based on the angle and distance
    line(pixsDistance * cos(radians(iAngle)), -pixsDistance * sin(radians(iAngle)), 
         (width - width * 0.505) * cos(radians(iAngle)), 
         -(width - width * 0.505) * sin(radians(iAngle)));
  }
  popMatrix(); // Restore the previous transformation matrix
}

void drawLine() {
  pushMatrix(); // Save the current transformation matrix
  strokeWeight(9); // Set stroke weight
  stroke(30, 250, 60); // Set stroke color to green
  translate(width / 2, height - height * 0.074); // Move the origin to the specified location

  // Draw the line based on the angle
  line(0, 0, (height - height * 0.12) * cos(radians(iAngle)), 
       -(height - height * 0.12) * sin(radians(iAngle)));
  popMatrix(); // Restore the previous transformation matrix
}

void drawText() {
  pushMatrix(); // Save the current transformation matrix

  // Check if the object is out of range
  if (iDistance > 40) {
    noObject = "Out of Range";
  } else {
    noObject = "In Range";
  }

  fill(0, 0, 0); // Set fill color to black
  noStroke(); // Disable stroke
  rect(0, height - height * 0.0648, width, height); // Draw the background rectangle

  fill(98, 245, 31); // Set fill color to green
  textSize(25); // Set text size

  // Draw the distance markers
  text("10cm", width - width * 0.3854, height - height * 0.0833);
  text("20cm", width - width * 0.281, height - height * 0.0833);
  text("30cm", width - width * 0.177, height - height * 0.0833);
  text("40cm", width - width * 0.0729, height - height * 0.0833);

  textSize(40); // Set text size
  // Draw the labels
  text("N_Tech ", width - width * 0.875, height - height * 0.0277);
  text("Angle: " + iAngle + " ", width - width * 0.48, height - height * 0.0277);
  text("Distance: ", width - width * 0.26, height - height * 0.0277);

  // Draw the distance if within range
  if (iDistance < 40) {
    text("        " + iDistance + " cm", width - width * 0.225, height - height * 0.0277);
  }

  textSize(25); // Set text size
  fill(98, 245, 60); // Set fill color to green

  // Draw angle markers
  translate((width - width * 0.4994) + width / 2 * cos(radians(30)), 
            (height - height * 0.0907) - width / 2 * sin(radians(30)));
  rotate(-radians(-60));
  text("30", 0, 0);
  resetMatrix();

  translate((width - width * 0.503) + width / 2 * cos(radians(60)), 
            (height - height * 0.0888) - width / 2 * sin(radians(60)));
  rotate(-radians(-30));
  text("60", 0, 0);
  resetMatrix();

  translate((width - width * 0.507) + width / 2 * cos(radians(90)), 
            (height - height * 0.0833) - width / 2 * sin(radians(90)));
  rotate(radians(0));
  text("90", 0, 0);
  resetMatrix();

  translate(width - width * 0.513 + width / 2 * cos(radians(120)), 
            (height - height * 0.07129) - width / 2 * sin(radians(120)));
  rotate(radians(-30));
  text("120", 0, 0);
  resetMatrix();

  translate((width - width * 0.5104) + width / 2 * cos(radians(150)), 
            (height - height * 0.0574) - width / 2 * sin(radians(150)));
  rotate(radians(-60));
  text("150", 0, 0);
  popMatrix(); // Restore the previous transformation matrix
}
